#!/usr/bin/env bash

set -e      # Exit immediately if any command fails

build_dir="$(pwd)/.build"
test_logs="$build_dir/logs"
failing_log="$test_logs/failing.lastrun"
mkdir -p "$test_logs"

test_expected_dir="tests/output"
test_output_dir="$test_logs/output"
mkdir -p "$test_expected_dir" "$test_output_dir"

# Utilities
# ---------

die()      { echo -e "FATAL:" "$@" >&2 ; exit 1 ; }
progress() { echo -e "== $@" >&2 ; }
warn()     { progress "[WARNING] $@" ; }

pretty_diff() {
    git --no-pager diff --no-index "$@"
}

# Environment Setup
# -----------------

run_env() {
    local run_type release_dir
    run_type="$1" ; shift
    run_file="$1" ; shift
    release_dir="$build_dir/k/k-distribution/target/release/k"
    export PATH="$release_dir/lib/native/linux:$release_dir/lib/native/linux64:$release_dir/bin/:$PATH"
    eval $(opam config env)
    case "$run_file" in
        *.imp)  DEFN_DIRECTORY="$build_dir/defn/imp/$run_type"        ;;
        *.fun)  DEFN_DIRECTORY="$build_dir/defn/fun/$run_type"        ;;
        *)      die "Do not know definition to run with: '$run_file'" ;;
    esac
}

# Runners
# -------

run_krun() {
    local run_file strategy
    run_file="$1" ; shift
    strategy="$1" ; shift
    run_env kcompile "$run_file"
    export K_OPTS=-Xss500m
    krun --directory "$DEFN_DIRECTORY" -cSTRATEGY="$strategy" "$run_file" "$@"
}

run_krun_orig() {
    local run_file="$1" ; shift
    run_env krun "$run_file"
    export K_OPTS=-Xss500m
    krun --directory "$DEFN_DIRECTORY" "$run_file" "$@"
}

run_kdebug() {
    local run_file strategy
    run_file="$1" ; shift
    strategy="$1" ; shift
    run_krun "$run_file" "$strategy" --debugger "$@"
}

run_ksearch() {
    local run_file strategy
    run_file="$1" ; shift
    strategy="$1" ; shift
    run_krun "$run_file" "$strategy" --search "$@"
}

run_test() {
    local test_file strategy_file test_number counter exit_status current_status
    local test_id test_output_file test_expected_file
    test_file="$1"     ; shift
    strategy_file="$1" ; shift
    { test_number="$1" && shift ; } || test_number="*"

    [[ -f "$test_file"     ]] || die "File '$test_file' does not exist ..."
    [[ -f "$strategy_file" ]] || die "File '$strategy_file' does not exist ..."

    exit_status=0
    counter=0
    while read strategy; do
        [[ "$strategy" != '' ]] || continue
        counter=$((counter + 1))
        [[ "$test_number" == '*' ]] || [[ "$test_number" == "$counter" ]] || continue

        test_id="$(echo "$(basename $test_file) $strategy" | md5sum | tr -d '[:space:]-')"
        test_output_file="$test_output_dir/$test_id.out"
        progress "testing: '$test_file' with strategy '$strategy', output $test_output_file"

        echo "Program:  $test_file"           > "$test_output_file"
        echo "Strategy: $strategy"          >> "$test_output_file"
        { printf '=%.0s' {1..80} ; echo ; } >> "$test_output_file"
        run_krun "$test_file" "$strategy"    >> "$test_output_file"

        test_expected_file="$test_expected_dir/$test_id.out"
        if [[ ! -f "$test_expected_file" ]]; then
            warn "Expected output file does not exist: $test_expected_file"
            exit_status='1'
        else
            current_status='0'
            pretty_diff "$test_expected_file" "$test_output_file" || current_status="$?"
            if [[ "$current_status" != '0' ]]; then
                echo "$test_file with strategy '$strategy'" >> "$failing_log"
                exit_status="$current_status"
            fi
        fi
    done < "$strategy_file"
    return "$exit_status"
}

# Main
# ----

cd "$(dirname $0)"

# main functionality
run_command="$1" ; shift
case "$run_command" in

    # Running
    run)      run_krun      "$@" ;;
    run-orig) run_krun_orig "$@" ;;
    debug)    run_kdebug    "$@" ;;
    search)   run_ksearch   "$@" ;;

    # Testing
    test) run_test "$@" ;;

    *) echo "
    usage: $0 [run|run-orig|debug|search] <file> <strategy> <K args>*

       # Running
       # -------
       $0 run      <pgm> <strategy>   Run a single program using given strategy
       $0 run-orig <pgm>              Run a single program using the original definition
       $0 debug    <pgm> <strategy>   Run a single program using given strategy in the debugger
       $0 search   <pgm> <strategy>   Search a single program's executions using given strategy

       Note: <pgm> is a path to a file containing a program (languages supported: IMP, FUN).
             <strategy> is a term in sort STRATEGY.

       # Testing
       # -------
       $0 test <pgm> <strat> [<strat-num>] Run a test from the `tests/` directory.

       Note: <pgm>          is the path to the program in `tests/`
             <strat>        is a file with one strategy per line
             <strat-num>    is which strategy from <strat> to run (default '*')

       Note: This command is more for devs and CI servers.
" ; exit ;;
esac
