#!/usr/bin/env bash

set -e      # Exit immediately if any command fails

build_dir="$(pwd)/.build"
test_logs="$build_dir/logs"
failing_log="$test_logs/failing.lastrun"
mkdir -p "$test_logs"

# Utilities
# ---------

die()      { echo -e "FATAL:" "$@" >&2 ; exit 1 ; }
progress() { echo -e "== $@" >&2 ; }
warn()     { progress "[WARNING] $@" ; }

pretty_diff() {
    git --no-pager diff --no-index "$@"
}

# Environment Setup
# -----------------

run_env() {
    local run_type release_dir
    run_type="$1" ; shift
    run_file="$1" ; shift
    release_dir="$build_dir/k/k-distribution/target/release/k"
    export PATH="$release_dir/lib/native/linux:$release_dir/lib/native/linux64:$release_dir/bin/:$PATH"
    eval $(opam config env)
    case "$run_file" in
        *.imp)  DEFN_DIRECTORY="$build_dir/defn/imp/$run_type"        ;;
        *.fun)  DEFN_DIRECTORY="$build_dir/defn/fun/$run_type"        ;;
        *)      die "Do not know definition to run with: '$run_file'" ;;
    esac
}

# Runners
# -------

run_krun() {
    local run_file strategy
    run_file="$1" ; shift
    strategy="$1" ; shift
    run_env kcompile "$run_file"
    export K_OPTS=-Xss500m
    krun --directory "$DEFN_DIRECTORY" -cSTRATEGY="$strategy" "$run_file" "$@"
}

run_krun_orig() {
    local run_file="$1" ; shift
    run_env krun "$run_file"
    export K_OPTS=-Xss500m
    krun --directory "$DEFN_DIRECTORY" "$run_file" "$@"
}

run_kdebug() {
    local run_file strategy
    run_file="$1" ; shift
    strategy="$1" ; shift
    run_krun "$run_file" "$strategy" --debugger "$@"
}

run_ksearch() {
    local run_file strategy
    run_file="$1" ; shift
    strategy="$1" ; shift
    run_krun "$run_file" "$strategy" --search "$@"
}

run_test() {
    local test_file exec_strategy expected_hash actual_hash output_file exit_status
    test_file="$1" ; shift
    exit_status='0'

    while read expected_hash exec_strategy; do
        output_file="$test_logs/$test_file.$expected_hash"
        mkdir -p "$(dirname "$output_file")"
        progress "test:   '$test_file' with '$exec_strategy', output to '$output_file'"

        if [[ -f "$test_file.imp" ]]; then
            test_file="$test_file.imp"
        elif [[ -f "$test_file.fun" ]]; then
            test_file="$test_file.fun"
        fi

        if [[ "$exec_strategy" == 'orig' ]]; then
            run_krun_orig "$test_file"                  > "$output_file"
        else
            run_krun      "$test_file" "$exec_strategy" > "$output_file"
        fi

        actual_hash="$(cat "$output_file" | md5sum | tr -d '[:space:]-')"
        if [[ "$expected_hash" != "$actual_hash" ]]; then
            progress "failed: '$test_file' with '$exec_strategy'\n" \
                     "            expected $expected_hash\n" \
                     "            actual   $actual_hash"
            exit_status='1'
        else
            progress "passed: '$test_file' with '$exec_strategy'"
        fi
    done < "$test_file.strat"

    exit "$exit_status"
}

# Main
# ----

cd "$(dirname $0)"

# main functionality
run_command="$1" ; shift
case "$run_command" in

    # Running
    run)      run_krun      "$@" ;;
    run-orig) run_krun_orig "$@" ;;
    debug)    run_kdebug    "$@" ;;
    search)   run_ksearch   "$@" ;;

    # Testing
    test) run_test "$@" ;;

    *) echo "
    usage: $0 [run|run-orig|debug|search] <file> <strategy> <K args>*

       # Running
       # -------
       $0 run      <pgm> <strategy>   Run a single program using given strategy
       $0 run-orig <pgm>              Run a single program using the original definition
       $0 debug    <pgm> <strategy>   Run a single program using given strategy in the debugger
       $0 search   <pgm> <strategy>   Search a single program's executions using given strategy

       Note: <pgm> is a path to a file containing a program (languages supported: IMP, FUN).
             <strategy> is a term in sort STRATEGY.

       # Testing
       # -------
       $0 test <pgm> <hash>   Test that running with `run-orig` produces the correct hash.

       Note: <pgm>          is the path to the program in `tests/`
             <hash>         is the expected md5sum of the output

       Note: This command is more for devs and CI servers.
" ; exit ;;
esac
