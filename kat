#!/usr/bin/env bash

set -euo pipefail
shopt -s extglob

kat_script="$0"
while [[ -h "$kat_script" ]]; do
    kat_dir="$(cd -P "$(dirname "$kat_script")" && pwd)"
    kat_script="$(readlink "$kat_script")"
    [[ "$kat_script" != /* ]] && kat_script="$kat_dir/$kat_script"
done
kat_dir="$(cd -P "$(dirname "$kat_script")" && pwd)"

build_dir="$kat_dir/.build"
release_dir="$build_dir/k/k-distribution/target/release/k"
defn_dir="$build_dir/defn"

export PATH="$release_dir/lib/native/linux:$release_dir/lib/native/linux64:$release_dir/bin/:$PATH"

test_logs="$build_dir/logs"
test_log="$test_logs/tests.log"
mkdir -p "$test_logs"

# Utilities
# ---------

die()      { echo -e "FATAL:" "$@" >&2 ; exit 1 ; }
progress() { echo -e "== $@" >&2 ; }
warn()     { progress "[WARNING] $@" ; }

# Environment Setup
# -----------------

run_env() {
    local run_backend run_file
    run_backend="$1" ; shift
    run_file="$1"    ; shift
    if [[ "$run_backend" == 'krun' ]]; then
        eval $(opam config env)
    fi
    case "$run_file" in
        *.imp) DEFN_DIRECTORY="$build_dir/defn/imp/$run_backend"     ;;
        *.fun) DEFN_DIRECTORY="$build_dir/defn/fun/$run_backend"     ;;
        *)     die "Do not know definition to run with: '$run_file'" ;;
    esac
}

# Runners
# -------

run_krun() {
    local run_file strategy
    run_file="$1" ; shift
    strategy="$1" ; shift
    run_env java "$run_file"
    export K_OPTS=-Xss500m
    krun --directory "$DEFN_DIRECTORY" -cSTRATEGY="$strategy" "$run_file" "$@"
}

run_krun_orig() {
    local run_file="$1" ; shift
    run_env ocaml "$run_file"
    export K_OPTS=-Xss500m
    krun --directory "$DEFN_DIRECTORY" "$run_file" "$@"
}

run_program() {
    local run_file strategy
    run_file="$1" ; shift
    strategy="$1" ; shift
    if [[ "$strategy" == 'orig' ]]; then
        run_krun_orig "$run_file" "$@"
    else
        run_krun "$run_file" "$strategy" "$@"
    fi
}

run_klab() {
    local run_file run_strategy

    run_file="$1"     ; shift
    run_strategy="$1" ; shift

    rm -rf '/tmp/klab'

    $0 run $run_file "$run_strategy" \
        --state-log --state-log-path /tmp/klab --state-log-id wasmtest \
        --state-log-events OPEN,EXECINIT,SEARCHINIT,REACHINIT,REACHTARGET,REACHPROVED,NODE,RULE,SRULE,RULEATTEMPT,IMPLICATION,Z3QUERY,Z3RESULT,CLOSE \
        --output json \
        --output-tokenize '<s> <k>' \
        --debug \
        --no-sort-collections \
        >/dev/null

    progress 'Run `TMPDIR=/tmp KLAB_EVMS_PATH=foo klab debugg wasmtest` to explore execution trace.'
}

run_test() {
    local test_name test_ext test_file test_strat test_out test_expected
    local exec_strategy exit_status

    test_name="$1" ; shift
    exit_status='0'

    if [[ -f "$test_name.imp" ]]; then
        test_ext="imp"
    elif [[ -f "$test_name.fun" ]]; then
        test_ext="fun"
    fi

    test_file="$test_name.$test_ext"
    test_strat="$test_name.strat"
    test_out="$test_name.out"
    test_expected="$test_name.expected"

    {   while read exec_strategy; do
            echo
            echo "Strategy: $exec_strategy"
            echo "================================================================================"

            if [[ "$(echo "$exec_strategy" | head -c 1)" == "#" ]]; then
                warn "skipping: '$test_file' with '$exec_strategy'"
                echo "SKIPPING"
                continue
            fi

            run_program "$test_file" "$exec_strategy"
        done < "$test_strat"
    } > "$test_out"

    git --no-pager diff --no-index "$test_expected" "$test_out" \
        || exit_status="$?"

    exit "$exit_status"
}

# Main
# ----

# main functionality
run_command="$1" ; shift
case "$run_command" in

    # Running
    run)      run_program "$@" ;;
    klab-run) run_klab    "$@" ;;

    # Testing
    test) run_test "$@" ;;

    *) echo "
    usage: $0 run  <file> <strategy> <K args>*
           $0 test <test_name>

       # Running
       # -------
       $0 run:  Run a single program using given strategy
       $0 test: Test that running a program with given strategies produces the correct output.

       Note: <pgm> is a path to a file containing a program (languages supported: IMP, FUN).
             <strategy> is a term in sort STRATEGY.
                        If `STRATEGY == orig`, then it runs with the *original* semantics under the OCaml backend.
             <test_name> name of a test in `tests/imp` or `tests/fun` without extension, eg. `tests/imp/collatz`.
" ; exit ;;
esac
