// IMP-KAT Tests
// =============

// This is a simple testing harness driven by the `tangle` script. Call
// `./tangle test` in the root directory to run the test-set.

// SBC
// ---

// Here, we compile each program into a simpler set of rules specific to that
// program. Compilation must be run with `--search` so that when the state of
// symbolic execution splits at branch points (eg. `if(_)_else_` in IMP) we collect
// rules for both branches.

// ### Krazy Loop {#krazy-loop-1}


<kat-imp>
 <s> #STUCK ~> #compile-result ( ( ( ( ( .Rules
                                       , < { int i , ( j , ( k , ( l , ( m , ( s , .Ids ) ) ) ) ) ; i = 11 ; j = 11 ; k = 0 ; l = 0 ; m = 0 ; s = 0 ; while ( 0 <= i ) { k = 0 ; j = 11 ; while ( 0 <= j ) { l = 3 * j - ( j + i ) ; m = 5 * i + 1 ; if ( i <= ( ( i / 2 ) * 2 ) ) { k = k + ( l / i ) ; } else { k = k + ( j / m ) ; } j = j - 1 ; } s = s + ( ( i * k ) / 3 ) ; i = i - 1 ; } | .Map }                                                                                                                                                                            --> { while ( 0 <= i ) { k = 0 ; j = 11 ; while ( 0 <= j ) { l = 3 * j - ( j + i ) ; m = 5 * i + 1 ; if ( i <= ( ( i / 2 ) * 2 ) ) { k = k + ( l / i ) ; } else { k = k + ( j / m ) ; } j = j - 1 ; } s = s + ( ( i * k ) / 3 ) ; i = i - 1 ; } | l |-> 0 s |-> 0 k |-> 0 j |-> 9 i |-> 7 m |-> 0 } > )
                                       , < { while ( 0 <= i ) { k = 0 ; j = 11 ; while ( 0 <= j ) { l = 3 * j - ( j + i ) ; m = 5 * i + 1 ; if ( i <= ( ( i / 2 ) * 2 ) ) { k = k + ( l / i ) ; } else { k = k + ( j / m ) ; } j = j - 1 ; } s = s + ( ( i * k ) / 3 ) ; i = i - 1 ; } | l |-> V0 k |-> V1 j |-> V2 i |-> V3 s |-> V4 m |-> V5 | false }                                                                                                                                                                                                                          --> { . | l |-> V0 k |-> V1 j |-> V2 i |-> V3 s |-> V4 m |-> V5 } > )
                                       , < { while ( 0 <= i ) { k = 0 ; j = 11 ; while ( 0 <= j ) { l = 3 * j - ( j + i ) ; m = 5 * i + 1 ; if ( i <= ( ( i / 2 ) * 2 ) ) { k = k + ( l / i ) ; } else { k = k + ( j / m ) ; } j = j - 1 ; } s = s + ( ( i * k ) / 3 ) ; i = i - 1 ; } | l |-> V0 k |-> V1 j |-> V2 i |-> V3 s |-> V4 m |-> V5 | true }                                                                                                                                                                                                                           --> { ( while ( 0 <= j ) { l = 3 * j - ( j + i ) ; m = 5 * i + 1 ; if ( i <= ( ( i / 2 ) * 2 ) ) { k = k + ( l / i ) ; } else { k = k + ( j / m ) ; } j = j - 1 ; } ) ~> ( s = s + ( ( i * k ) / 3 ) ; ) ~> ( i = i - 1 ; ) ~> while ( true ) { k = 0 ; j = 11 ; while ( 0 <= j ) { l = 3 * j - ( j + i ) ; m = 5 * i + 1 ; if ( i <= ( ( i / 2 ) * 2 ) ) { k = k + ( l / i ) ; } else { k = k + ( j / m ) ; } j = j - 1 ; } s = s + ( ( i * k ) / 3 ) ; i = i - 1 ; } | l |-> V0 k |-> 0 j |-> 9 i |-> V3 s |-> V4 m |-> V5 } > )
                                       , < { ( while ( 0 <= j ) { l = 3 * j - ( j + i ) ; m = 5 * i + 1 ; if ( i <= ( ( i / 2 ) * 2 ) ) { k = k + ( l / i ) ; } else { k = k + ( j / m ) ; } j = j - 1 ; } ) ~> ( s = s + ( ( i * k ) / 3 ) ; ) ~> ( i = i - 1 ; ) ~> while ( true ) { k = 0 ; j = 11 ; while ( 0 <= j ) { l = 3 * j - ( j + i ) ; m = 5 * i + 1 ; if ( i <= ( ( i / 2 ) * 2 ) ) { k = k + ( l / i ) ; } else { k = k + ( j / m ) ; } j = j - 1 ; } s = s + ( ( i * k ) / 3 ) ; i = i - 1 ; } | l |-> V6 k |-> V7 j |-> V8 i |-> V9 s |-> V10 m |-> V11 | false } --> { while ( true ) { k = 0 ; j = 11 ; while ( 0 <= j ) { l = 3 * j - ( j + i ) ; m = 5 * i + 1 ; if ( i <= ( ( i / 2 ) * 2 ) ) { k = k + ( l / i ) ; } else { k = k + ( j / m ) ; } j = j - 1 ; } s = s + ( ( i * k ) / 3 ) ; i = i - 1 ; } | l |-> V6 k |-> V7 j |-> V8 i |-> ( V9 -Int 1 ) s |-> ( V10 +Int V9 *Int V7 /Int 3 ) m |-> V11 } > )
                                       , < { ( while ( 0 <= j ) { l = 3 * j - ( j + i ) ; m = 5 * i + 1 ; if ( i <= ( ( i / 2 ) * 2 ) ) { k = k + ( l / i ) ; } else { k = k + ( j / m ) ; } j = j - 1 ; } ) ~> ( s = s + ( ( i * k ) / 3 ) ; ) ~> ( i = i - 1 ; ) ~> while ( true ) { k = 0 ; j = 11 ; while ( 0 <= j ) { l = 3 * j - ( j + i ) ; m = 5 * i + 1 ; if ( i <= ( ( i / 2 ) * 2 ) ) { k = k + ( l / i ) ; } else { k = k + ( j / m ) ; } j = j - 1 ; } s = s + ( ( i * k ) / 3 ) ; i = i - 1 ; } | l |-> V6 k |-> V7 j |-> V8 i |-> V9 s |-> V10 m |-> V11 | true }  --> { ( while ( true ) { l = 3 * j - ( j + i ) ; m = 5 * i + 1 ; if ( i <= ( ( i / 2 ) * 2 ) ) { k = k + ( l / i ) ; } else { k = k + ( j / m ) ; } j = j - 1 ; } ) ~> ( s = s + ( ( i * k ) / 3 ) ; ) ~> ( i = i - 1 ; ) ~> while ( true ) { k = 0 ; j = 11 ; while ( 0 <= j ) { l = 3 * j - ( j + i ) ; m = 5 * i + 1 ; if ( i <= ( ( i / 2 ) * 2 ) ) { k = k + ( l / i ) ; } else { k = k + ( j / m ) ; } j = j - 1 ; } s = s + ( ( i * k ) / 3 ) ; i = i - 1 ; } | l |-> ( 3 *Int V8 -Int ( V8 +Int V9 ) ) k |-> ( V7 +Int V8 /Int ( 5 *Int V9 +Int 1 ) ) j |-> ( V8 -Int 1 ) i |-> V9 s |-> V10 m |-> ( 5 *Int V9 +Int 1 ) } >
                                       ) </s>
 <kat>
  <analysis> .Analysis </analysis>
  <states> .States </states>
 </kat>
 <imp>
  <k> ( while ( true ) { l = 3 * j - ( j + i ) ; m = 5 * i + 1 ; if ( i <= ( ( i / 2 ) * 2 ) ) { k = k + ( l / i ) ; } else { k = k + ( j / m ) ; } j = j - 1 ; } ) ~> ( s = s + ( ( i * k ) / 3 ) ; ) ~> ( i = i - 1 ; ) ~> while ( true ) { k = 0 ; j = 11 ; while ( 0 <= j ) { l = 3 * j - ( j + i ) ; m = 5 * i + 1 ; if ( i <= ( ( i / 2 ) * 2 ) ) { k = k + ( l / i ) ; } else { k = k + ( j / m ) ; } j = j - 1 ; } s = s + ( ( i * k ) / 3 ) ; i = i - 1 ; } </k>
  <mem> l |-> V12 k |-> V13 j |-> V14 i |-> V15 s |-> V16 m |-> V17 </mem>
 </imp>
</kat-imp>

<kat-imp>
 <s> #STUCK ~> #compile-result ( ( ( ( ( .Rules
                                       , < { int i , ( j , ( k , ( l , ( m , ( s , .Ids ) ) ) ) ) ; i = 11 ; j = 11 ; k = 0 ; l = 0 ; m = 0 ; s = 0 ; while ( 0 <= i ) { k = 0 ; j = 11 ; while ( 0 <= j ) { l = 3 * j - ( j + i ) ; m = 5 * i + 1 ; if ( i <= ( ( i / 2 ) * 2 ) ) { k = k + ( l / i ) ; } else { k = k + ( j / m ) ; } j = j - 1 ; } s = s + ( ( i * k ) / 3 ) ; i = i - 1 ; } | .Map }                                                                                                                                                                            --> { while ( 0 <= i ) { k = 0 ; j = 11 ; while ( 0 <= j ) { l = 3 * j - ( j + i ) ; m = 5 * i + 1 ; if ( i <= ( ( i / 2 ) * 2 ) ) { k = k + ( l / i ) ; } else { k = k + ( j / m ) ; } j = j - 1 ; } s = s + ( ( i * k ) / 3 ) ; i = i - 1 ; } | l |-> 0 s |-> 0 k |-> 0 j |-> 9 i |-> 7 m |-> 0 } > )
                                       , < { while ( 0 <= i ) { k = 0 ; j = 11 ; while ( 0 <= j ) { l = 3 * j - ( j + i ) ; m = 5 * i + 1 ; if ( i <= ( ( i / 2 ) * 2 ) ) { k = k + ( l / i ) ; } else { k = k + ( j / m ) ; } j = j - 1 ; } s = s + ( ( i * k ) / 3 ) ; i = i - 1 ; } | l |-> V0 k |-> V1 j |-> V2 i |-> V3 s |-> V4 m |-> V5 | false }                                                                                                                                                                                                                          --> { . | l |-> V0 k |-> V1 j |-> V2 i |-> V3 s |-> V4 m |-> V5 } > )
                                       , < { while ( 0 <= i ) { k = 0 ; j = 11 ; while ( 0 <= j ) { l = 3 * j - ( j + i ) ; m = 5 * i + 1 ; if ( i <= ( ( i / 2 ) * 2 ) ) { k = k + ( l / i ) ; } else { k = k + ( j / m ) ; } j = j - 1 ; } s = s + ( ( i * k ) / 3 ) ; i = i - 1 ; } | l |-> V0 k |-> V1 j |-> V2 i |-> V3 s |-> V4 m |-> V5 | true }                                                                                                                                                                                                                           --> { ( while ( 0 <= j ) { l = 3 * j - ( j + i ) ; m = 5 * i + 1 ; if ( i <= ( ( i / 2 ) * 2 ) ) { k = k + ( l / i ) ; } else { k = k + ( j / m ) ; } j = j - 1 ; } ) ~> ( s = s + ( ( i * k ) / 3 ) ; ) ~> ( i = i - 1 ; ) ~> while ( true ) { k = 0 ; j = 11 ; while ( 0 <= j ) { l = 3 * j - ( j + i ) ; m = 5 * i + 1 ; if ( i <= ( ( i / 2 ) * 2 ) ) { k = k + ( l / i ) ; } else { k = k + ( j / m ) ; } j = j - 1 ; } s = s + ( ( i * k ) / 3 ) ; i = i - 1 ; } | l |-> V0 k |-> 0 j |-> 9 i |-> V3 s |-> V4 m |-> V5 } > )
                                       , < { ( while ( 0 <= j ) { l = 3 * j - ( j + i ) ; m = 5 * i + 1 ; if ( i <= ( ( i / 2 ) * 2 ) ) { k = k + ( l / i ) ; } else { k = k + ( j / m ) ; } j = j - 1 ; } ) ~> ( s = s + ( ( i * k ) / 3 ) ; ) ~> ( i = i - 1 ; ) ~> while ( true ) { k = 0 ; j = 11 ; while ( 0 <= j ) { l = 3 * j - ( j + i ) ; m = 5 * i + 1 ; if ( i <= ( ( i / 2 ) * 2 ) ) { k = k + ( l / i ) ; } else { k = k + ( j / m ) ; } j = j - 1 ; } s = s + ( ( i * k ) / 3 ) ; i = i - 1 ; } | l |-> V6 k |-> V7 j |-> V8 i |-> V9 s |-> V10 m |-> V11 | false } --> { while ( true ) { k = 0 ; j = 11 ; while ( 0 <= j ) { l = 3 * j - ( j + i ) ; m = 5 * i + 1 ; if ( i <= ( ( i / 2 ) * 2 ) ) { k = k + ( l / i ) ; } else { k = k + ( j / m ) ; } j = j - 1 ; } s = s + ( ( i * k ) / 3 ) ; i = i - 1 ; } | l |-> V6 k |-> V7 j |-> V8 i |-> ( V9 -Int 1 ) s |-> ( V10 +Int V9 *Int V7 /Int 3 ) m |-> V11 } > )
                                       , < { ( while ( 0 <= j ) { l = 3 * j - ( j + i ) ; m = 5 * i + 1 ; if ( i <= ( ( i / 2 ) * 2 ) ) { k = k + ( l / i ) ; } else { k = k + ( j / m ) ; } j = j - 1 ; } ) ~> ( s = s + ( ( i * k ) / 3 ) ; ) ~> ( i = i - 1 ; ) ~> while ( true ) { k = 0 ; j = 11 ; while ( 0 <= j ) { l = 3 * j - ( j + i ) ; m = 5 * i + 1 ; if ( i <= ( ( i / 2 ) * 2 ) ) { k = k + ( l / i ) ; } else { k = k + ( j / m ) ; } j = j - 1 ; } s = s + ( ( i * k ) / 3 ) ; i = i - 1 ; } | l |-> V6 k |-> V7 j |-> V8 i |-> V9 s |-> V10 m |-> V11 | true }  --> { ( while ( true ) { l = 3 * j - ( j + i ) ; m = 5 * i + 1 ; if ( i <= ( ( i / 2 ) * 2 ) ) { k = k + ( l / i ) ; } else { k = k + ( j / m ) ; } j = j - 1 ; } ) ~> ( s = s + ( ( i * k ) / 3 ) ; ) ~> ( i = i - 1 ; ) ~> while ( true ) { k = 0 ; j = 11 ; while ( 0 <= j ) { l = 3 * j - ( j + i ) ; m = 5 * i + 1 ; if ( i <= ( ( i / 2 ) * 2 ) ) { k = k + ( l / i ) ; } else { k = k + ( j / m ) ; } j = j - 1 ; } s = s + ( ( i * k ) / 3 ) ; i = i - 1 ; } | l |-> ( 3 *Int V8 -Int ( V8 +Int V9 ) ) k |-> ( V7 +Int ( 3 *Int V8 -Int ( V8 +Int V9 ) ) /Int V9 ) j |-> ( V8 -Int 1 ) i |-> V9 s |-> V10 m |-> ( 5 *Int V9 +Int 1 ) } >
                                       ) </s>
 <kat>
  <analysis> .Analysis </analysis>
  <states> .States </states>
 </kat>
 <imp>
  <k> ( while ( true ) { l = 3 * j - ( j + i ) ; m = 5 * i + 1 ; if ( i <= ( ( i / 2 ) * 2 ) ) { k = k + ( l / i ) ; } else { k = k + ( j / m ) ; } j = j - 1 ; } ) ~> ( s = s + ( ( i * k ) / 3 ) ; ) ~> ( i = i - 1 ; ) ~> while ( true ) { k = 0 ; j = 11 ; while ( 0 <= j ) { l = 3 * j - ( j + i ) ; m = 5 * i + 1 ; if ( i <= ( ( i / 2 ) * 2 ) ) { k = k + ( l / i ) ; } else { k = k + ( j / m ) ; } j = j - 1 ; } s = s + ( ( i * k ) / 3 ) ; i = i - 1 ; } </k>
  <mem> l |-> V12 k |-> V13 j |-> V14 i |-> V15 s |-> V16 m |-> V17 </mem>
 </imp>
</kat-imp>

