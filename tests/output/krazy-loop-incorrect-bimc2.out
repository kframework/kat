// IMP-KAT Tests
// =============

// This is a simple testing harness driven by the `tangle` script. Call
// `./tangle test` in the root directory to run the test-set.

// BIMC
// ----

// Here, we allow each program to initialize (get through variable declarations) by
// running `step-with skip`. Then we issue some `bimc` query to check if the
// program obeys the given invariant up to the depth-bound.

// ### Krazy Loop


<kat-imp>
 <s> #STUCK ~> #bimc-result #true in 1384 steps </s>
 <kat>
  <analysis> .Analysis </analysis>
  <states> .States </states>
 </kat>
 <imp>
  <k> ( 18 / 0 ) ~> #freezer_+_0 ( 0 ) ~> #freezer_=_;0 ( k ) ~> ( j = j - 1 ; ) ~> ( while ( 0 <= j ) { l = 3 * j - ( j + i ) ; m = 5 * i + 1 ; if ( i <= ( ( i / 2 ) * 2 ) ) { k = k + ( l / i ) ; } else { k = k + ( j / m ) ; } j = j - 1 ; } ) ~> ( s = s + ( ( i * k ) / 3 ) ; ) ~> ( i = i - 1 ; ) ~> while ( 0 <= i ) { k = 0 ; j = 9 ; while ( 0 <= j ) { l = 3 * j - ( j + i ) ; m = 5 * i + 1 ; if ( i <= ( ( i / 2 ) * 2 ) ) { k = k + ( l / i ) ; } else { k = k + ( j / m ) ; } j = j - 1 ; } s = s + ( ( i * k ) / 3 ) ; i = i - 1 ; } </k>
  <mem> l |-> 18 k |-> 0 s |-> 46 j |-> 9 i |-> 0 m |-> 1 </mem>
 </imp>
</kat-imp>

