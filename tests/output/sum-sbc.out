// IMP-KAT Tests
// =============

// This is a simple testing harness driven by the `tangle` script. Call
// `./tangle test` in the root directory to run the test-set.

// SBC
// ---

// Here, we compile each program into a simpler set of rules specific to that
// program. Compilation must be run with `--search` so that when the state of
// symbolic execution splits at branch points (eg. `if(_)_else_` in IMP) we collect
// rules for both branches.

// ### Sum and Sum Plus

// Sum should generate three rules:

// 1.  One rule to get us to the beginning of the `while` loop (initialization).
// 2.  One rule corresponding to jumping over the `while` loop (if the condition on
//     the loop is false).
// 3.  One rule corresponding to an iteration of the `while` loop (if the condition
//     on the loop is true).


<kat-imp>
 <s> #STUCK ~> #compile-result ( ( ( .Rules

                                     // RULE 1
                                   , < { int n , ( s , .Ids ) ; n = 10 ; while ( 0 <= n ) { n = n + -1 ; s = s + n ; } | .Map } --> { while ( 0 <= n ) { n = n + -1 ; s = s + n ; } | s |-> 0 n |-> 10 } > )

                                     // RULE 2
                                   , < { while ( 0 <= n ) { n = n + -1 ; s = s + n ; } | s |-> V0 n |-> V1 | false }            --> { . | s |-> V0 n |-> V1 } > )

                                     // RULE 3
                                   , < { while ( 0 <= n ) { n = n + -1 ; s = s + n ; } | s |-> V0 n |-> V1 | true }             --> { while ( true ) { n = n + -1 ; s = s + n ; } | s |-> ( V0 +Int ( V1 +Int -1 ) ) n |-> ( V1 +Int -1 ) } >
                                   ) </s>
 <kat>
  <analysis> .Analysis </analysis>
  <states> .States </states>
 </kat>
 <imp>
  <k> while ( true ) { n = n + -1 ; s = s + n ; } </k>
  <mem> s |-> V2 n |-> V3 </mem>
 </imp>
</kat-imp>


// Sum Plus should generate the same rules, but the rule for the false branch of
// the `while` loop should also include the effect of the code after the `while`
// loop (rule 2').
