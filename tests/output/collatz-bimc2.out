// Running KAT
// ===========

// We'll use a simple testing harness in `bash` which just checks the output of
// `krun --search` against a supplied file. Run this with `bash runtests.sh`.

// BIMC
// ----

// Here, we allow each program to initialize (get through variable declarations) by
// running `step-with skip`. Then we issue some `bimc` query to check if the
// program obeys the given invariant up to the depth-bound.

// ### Collatz

// Check if calculating Collatz of 782 ever goes above 1000:

// Check if 1174 is the highest number that is reached:


Solution 1
<kat>
 <s> #STUCK ~> #bimc-result #false in 40 steps </s>
 <imp>
  <k> x ~> #freezer_+_1 ( 1 ) ~> #freezer_=_;0 ( x ) ~> while ( 2 <= n ) { if ( n <= ( ( n / 2 ) * 2 ) ) { n = n / 2 ; } else { n = 3 * n + 1 ; } x = x + 1 ; } </k>
  <mem> x |-> 3 n |-> 1762 </mem>
 </imp>
 <analysis> .Analysis </analysis>
 <states> .States </states>
</kat>


// Using the same technique, the sequence of maximum numbers generated is:

// 1.  2644 at 60 steps in \#\#TIME\#\#
// 2.  3238 at 730 steps in \#\#TIME\#\#
// 3.  4858 at 750 steps in \#\#TIME\#\#
// 4.  7288 at 770 steps in \#\#TIME\#\#
// 5.  9232 at 870 steps in \#\#TIME\#\#
