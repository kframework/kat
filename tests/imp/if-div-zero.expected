
Strategy: step 4 ; which-can? (^ divzero | ^ divnonzero)
================================================================================
<kat-imp>
  <s>
    #STUCK ( ) ~> #which-can ^ divnonzero | ^ divzero
  </s>
  <kat>
    <analysis>
      .Analysis
    </analysis>
    <states>
      .States
    </states>
  </kat>
  <harness>
    <imp>
      <k>
        7 / V0 ~> #freezer_<=__IMP1_ ( 3 ) ~> #freezerif(_)_else__IMP1_ ( { x = 1 ; } , { x = -1 ; } )
      </k>
      <mem>
        x |-> V0
        y |-> 7
      </mem>
    </imp>
  </harness>
</kat-imp>

Strategy: (#normal | ^ regular) until (^ divzero | ^ divnonzero)
================================================================================
<kat-imp>
  <s>
    #STUCK ( )
  </s>
  <kat>
    <analysis>
      .Analysis
    </analysis>
    <states>
      .States
    </states>
  </kat>
  <harness>
    <imp>
      <k>
        7 / V0 ~> #freezer_<=__IMP1_ ( 3 ) ~> #freezerif(_)_else__IMP1_ ( { x = 1 ; } , { x = -1 ; } )
      </k>
      <mem>
        x |-> V0
        y |-> 7
      </mem>
    </imp>
  </harness>
</kat-imp>

Strategy: compile
================================================================================
<kat-imp>
  <s>
    #STUCK ( )
  </s>
  <kat>
    <analysis>
      .Rules , < <imp>
        <k>
          int x , y , .Ids ; y = 7 ; x = V0 ; if ( y / x <= 3 ) { x = 1 ; } else { x = -1 ; }
        </k>
        <mem>
          .Map
        </mem>
      </imp> --> <imp>
        <k>
          .
        </k>
        <mem>
          x |-> -1
          y |-> 7
        </mem>
      </imp> requires 7 /Int V0 <=Int 3 ==K false
      #And
        V0 ==K 0 ==K false > , < <imp>
        <k>
          int x , y , .Ids ; y = 7 ; x = V1 ; if ( y / x <= 3 ) { x = 1 ; } else { x = -1 ; }
        </k>
        <mem>
          .Map
        </mem>
      </imp> --> <imp>
        <k>
          .
        </k>
        <mem>
          x |-> 1
          y |-> 7
        </mem>
      </imp> requires 7 /Int V1 <=Int 3 ==K true
      #And
        V1 ==K 0 ==K false > , < <imp>
        <k>
          int x , y , .Ids ; y = 7 ; x = 0 ; if ( y / x <= 3 ) { x = 1 ; } else { x = -1 ; }
        </k>
        <mem>
          .Map
        </mem>
      </imp> --> <imp>
        <k>
          div-zero-error ~> #freezer_<=__IMP1_ ( 3 ) ~> #freezerif(_)_else__IMP1_ ( { x = 1 ; } , { x = -1 ; } )
        </k>
        <mem>
          x |-> 0
          y |-> 7
        </mem>
      </imp> requires #True >
    </analysis>
    <states>
      .States
    </states>
  </kat>
  <harness>
    <imp>
      <k>
        div-zero-error ~> #freezer_<=__IMP1_ ( 3 ) ~> #freezerif(_)_else__IMP1_ ( { x = 1 ; } , { x = -1 ; } )
      </k>
      <mem>
        x |-> 0
        y |-> 7
      </mem>
    </imp>
  </harness>
</kat-imp>
