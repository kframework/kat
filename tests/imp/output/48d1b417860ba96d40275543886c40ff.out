Program:  collatz-all-upto.imp
Strategy: compile
================================================================================
<kat-imp>
  <s>
    #STUCK ( )
  </s>
  <kat>
    <analysis>
      .Rules , < <imp>
        <k>
          int b , c , n , x , .Ids ; b = 2000 ; c = 0 ; n = 1 ; x = 0 ; while ( c <= b ) { n = c ; while ( 2 <= n ) { if ( n <= ( n / 2 ) * 2 ) { n = n / 2 ; } else { n = 3 * n + 1 ; } x = x + 1 ; } c = c + 1 ; }
        </k>
        <mem>
          .Map
        </mem>
      </imp> --> <imp>
        <k>
          while ( c <= b ) { n = c ; while ( 2 <= n ) { if ( n <= ( n / 2 ) * 2 ) { n = n / 2 ; } else { n = 3 * n + 1 ; } x = x + 1 ; } c = c + 1 ; }
        </k>
        <mem>
          b |-> 2000
          c |-> 0
          n |-> 1
          x |-> 0
        </mem>
      </imp> requires #True > , < <imp>
        <k>
          while ( c <= b ) { n = c ; while ( 2 <= n ) { if ( n <= ( n / 2 ) * 2 ) { n = n / 2 ; } else { n = 3 * n + 1 ; } x = x + 1 ; } c = c + 1 ; }
        </k>
        <mem>
          b |-> V0
          c |-> V1
          n |-> V2
          x |-> V3
        </mem>
      </imp> --> <imp>
        <k>
          .
        </k>
        <mem>
          b |-> V0
          c |-> V1
          n |-> V2
          x |-> V3
        </mem>
      </imp> requires V1 <=Int V0 ==K false > , < <imp>
        <k>
          while ( c <= b ) { n = c ; while ( 2 <= n ) { if ( n <= ( n / 2 ) * 2 ) { n = n / 2 ; } else { n = 3 * n + 1 ; } x = x + 1 ; } c = c + 1 ; }
        </k>
        <mem>
          b |-> V4
          c |-> V5
          n |-> V6
          x |-> V7
        </mem>
      </imp> --> <imp>
        <k>
          while ( 2 <= n ) { if ( n <= ( n / 2 ) * 2 ) { n = n / 2 ; } else { n = 3 * n + 1 ; } x = x + 1 ; } ~> c = c + 1 ; ~> while ( c <= b ) { n = c ; while ( 2 <= n ) { if ( n <= ( n / 2 ) * 2 ) { n = n / 2 ; } else { n = 3 * n + 1 ; } x = x + 1 ; } c = c + 1 ; }
        </k>
        <mem>
          b |-> V4
          c |-> V5
          n |-> V5
          x |-> V7
        </mem>
      </imp> requires V5 <=Int V4 ==K true > , < <imp>
        <k>
          while ( 2 <= n ) { if ( n <= ( n / 2 ) * 2 ) { n = n / 2 ; } else { n = 3 * n + 1 ; } x = x + 1 ; } ~> c = c + 1 ; ~> while ( c <= b ) { n = c ; while ( 2 <= n ) { if ( n <= ( n / 2 ) * 2 ) { n = n / 2 ; } else { n = 3 * n + 1 ; } x = x + 1 ; } c = c + 1 ; }
        </k>
        <mem>
          b |-> V8
          c |-> V9
          n |-> V10
          x |-> V11
        </mem>
      </imp> --> <imp>
        <k>
          while ( c <= b ) { n = c ; while ( 2 <= n ) { if ( n <= ( n / 2 ) * 2 ) { n = n / 2 ; } else { n = 3 * n + 1 ; } x = x + 1 ; } c = c + 1 ; }
        </k>
        <mem>
          b |-> V8
          c |-> V9 +Int 1
          n |-> V10
          x |-> V11
        </mem>
      </imp> requires 2 <=Int V10 ==K false > , < <imp>
        <k>
          while ( 2 <= n ) { if ( n <= ( n / 2 ) * 2 ) { n = n / 2 ; } else { n = 3 * n + 1 ; } x = x + 1 ; } ~> c = c + 1 ; ~> while ( c <= b ) { n = c ; while ( 2 <= n ) { if ( n <= ( n / 2 ) * 2 ) { n = n / 2 ; } else { n = 3 * n + 1 ; } x = x + 1 ; } c = c + 1 ; }
        </k>
        <mem>
          b |-> V12
          c |-> V13
          n |-> V14
          x |-> V15
        </mem>
      </imp> --> <imp>
        <k>
          while ( 2 <= n ) { if ( n <= ( n / 2 ) * 2 ) { n = n / 2 ; } else { n = 3 * n + 1 ; } x = x + 1 ; } ~> c = c + 1 ; ~> while ( c <= b ) { n = c ; while ( 2 <= n ) { if ( n <= ( n / 2 ) * 2 ) { n = n / 2 ; } else { n = 3 * n + 1 ; } x = x + 1 ; } c = c + 1 ; }
        </k>
        <mem>
          b |-> V12
          c |-> V13
          n |-> 3 *Int V14 +Int 1
          x |-> V15 +Int 1
        </mem>
      </imp> requires 2 <=Int V14 ==K true #And
      V14 <=Int V14 /Int 2 *Int 2 ==K false > , < <imp>
        <k>
          while ( 2 <= n ) { if ( n <= ( n / 2 ) * 2 ) { n = n / 2 ; } else { n = 3 * n + 1 ; } x = x + 1 ; } ~> c = c + 1 ; ~> while ( c <= b ) { n = c ; while ( 2 <= n ) { if ( n <= ( n / 2 ) * 2 ) { n = n / 2 ; } else { n = 3 * n + 1 ; } x = x + 1 ; } c = c + 1 ; }
        </k>
        <mem>
          b |-> V16
          c |-> V17
          n |-> V18
          x |-> V19
        </mem>
      </imp> --> <imp>
        <k>
          while ( 2 <= n ) { if ( n <= ( n / 2 ) * 2 ) { n = n / 2 ; } else { n = 3 * n + 1 ; } x = x + 1 ; } ~> c = c + 1 ; ~> while ( c <= b ) { n = c ; while ( 2 <= n ) { if ( n <= ( n / 2 ) * 2 ) { n = n / 2 ; } else { n = 3 * n + 1 ; } x = x + 1 ; } c = c + 1 ; }
        </k>
        <mem>
          b |-> V16
          c |-> V17
          n |-> V18 /Int 2
          x |-> V19 +Int 1
        </mem>
      </imp> requires 2 <=Int V18 ==K true #And
      V18 <=Int V18 /Int 2 *Int 2 ==K true >
    </analysis>
    <states>
      .States
    </states>
  </kat>
  <harness>
    <imp>
      <k>
        while ( 2 <= n ) { if ( n <= ( n / 2 ) * 2 ) { n = n / 2 ; } else { n = 3 * n + 1 ; } x = x + 1 ; } ~> c = c + 1 ; ~> while ( c <= b ) { n = c ; while ( 2 <= n ) { if ( n <= ( n / 2 ) * 2 ) { n = n / 2 ; } else { n = 3 * n + 1 ; } x = x + 1 ; } c = c + 1 ; }
      </k>
      <mem>
        b |-> V20
        c |-> V21
        n |-> V22
        x |-> V23
      </mem>
    </imp>
  </harness>
</kat-imp>
