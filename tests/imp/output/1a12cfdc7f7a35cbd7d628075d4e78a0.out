Program:  collatz-all.imp
Strategy: compile
================================================================================
<kat-imp>
  <s>
    #STUCK ( )
  </s>
  <kat>
    <analysis>
      .Rules , < <imp>
        <k>
          int b , n , x , .Ids ; b = 1 ; n = 1 ; x = 0 ; while ( b <= 10 ) { n = b ; while ( 2 <= n ) { if ( n <= ( n / 2 ) * 2 ) { n = n / 2 ; } else { n = 3 * n + 1 ; } x = x + 1 ; } b = b + 1 ; }
        </k>
        <mem>
          .Map
        </mem>
      </imp> --> <imp>
        <k>
          while ( b <= 10 ) { n = b ; while ( 2 <= n ) { if ( n <= ( n / 2 ) * 2 ) { n = n / 2 ; } else { n = 3 * n + 1 ; } x = x + 1 ; } b = b + 1 ; }
        </k>
        <mem>
          b |-> 1
          n |-> 1
          x |-> 0
        </mem>
      </imp> requires #True > , < <imp>
        <k>
          while ( b <= 10 ) { n = b ; while ( 2 <= n ) { if ( n <= ( n / 2 ) * 2 ) { n = n / 2 ; } else { n = 3 * n + 1 ; } x = x + 1 ; } b = b + 1 ; }
        </k>
        <mem>
          b |-> V0
          n |-> V1
          x |-> V2
        </mem>
      </imp> --> <imp>
        <k>
          .
        </k>
        <mem>
          b |-> V0
          n |-> V1
          x |-> V2
        </mem>
      </imp> requires V0 <=Int 10 ==K false > , < <imp>
        <k>
          while ( b <= 10 ) { n = b ; while ( 2 <= n ) { if ( n <= ( n / 2 ) * 2 ) { n = n / 2 ; } else { n = 3 * n + 1 ; } x = x + 1 ; } b = b + 1 ; }
        </k>
        <mem>
          b |-> V3
          n |-> V4
          x |-> V5
        </mem>
      </imp> --> <imp>
        <k>
          while ( 2 <= n ) { if ( n <= ( n / 2 ) * 2 ) { n = n / 2 ; } else { n = 3 * n + 1 ; } x = x + 1 ; } ~> b = b + 1 ; ~> while ( b <= 10 ) { n = b ; while ( 2 <= n ) { if ( n <= ( n / 2 ) * 2 ) { n = n / 2 ; } else { n = 3 * n + 1 ; } x = x + 1 ; } b = b + 1 ; }
        </k>
        <mem>
          b |-> V3
          n |-> V3
          x |-> V5
        </mem>
      </imp> requires V3 <=Int 10 ==K true > , < <imp>
        <k>
          while ( 2 <= n ) { if ( n <= ( n / 2 ) * 2 ) { n = n / 2 ; } else { n = 3 * n + 1 ; } x = x + 1 ; } ~> b = b + 1 ; ~> while ( b <= 10 ) { n = b ; while ( 2 <= n ) { if ( n <= ( n / 2 ) * 2 ) { n = n / 2 ; } else { n = 3 * n + 1 ; } x = x + 1 ; } b = b + 1 ; }
        </k>
        <mem>
          b |-> V6
          n |-> V7
          x |-> V8
        </mem>
      </imp> --> <imp>
        <k>
          while ( b <= 10 ) { n = b ; while ( 2 <= n ) { if ( n <= ( n / 2 ) * 2 ) { n = n / 2 ; } else { n = 3 * n + 1 ; } x = x + 1 ; } b = b + 1 ; }
        </k>
        <mem>
          b |-> V6 +Int 1
          n |-> V7
          x |-> V8
        </mem>
      </imp> requires 2 <=Int V7 ==K false > , < <imp>
        <k>
          while ( 2 <= n ) { if ( n <= ( n / 2 ) * 2 ) { n = n / 2 ; } else { n = 3 * n + 1 ; } x = x + 1 ; } ~> b = b + 1 ; ~> while ( b <= 10 ) { n = b ; while ( 2 <= n ) { if ( n <= ( n / 2 ) * 2 ) { n = n / 2 ; } else { n = 3 * n + 1 ; } x = x + 1 ; } b = b + 1 ; }
        </k>
        <mem>
          b |-> V9
          n |-> V10
          x |-> V11
        </mem>
      </imp> --> <imp>
        <k>
          while ( 2 <= n ) { if ( n <= ( n / 2 ) * 2 ) { n = n / 2 ; } else { n = 3 * n + 1 ; } x = x + 1 ; } ~> b = b + 1 ; ~> while ( b <= 10 ) { n = b ; while ( 2 <= n ) { if ( n <= ( n / 2 ) * 2 ) { n = n / 2 ; } else { n = 3 * n + 1 ; } x = x + 1 ; } b = b + 1 ; }
        </k>
        <mem>
          b |-> V9
          n |-> 3 *Int V10 +Int 1
          x |-> V11 +Int 1
        </mem>
      </imp> requires 2 <=Int V10 ==K true #And
      V10 <=Int V10 /Int 2 *Int 2 ==K false > , < <imp>
        <k>
          while ( 2 <= n ) { if ( n <= ( n / 2 ) * 2 ) { n = n / 2 ; } else { n = 3 * n + 1 ; } x = x + 1 ; } ~> b = b + 1 ; ~> while ( b <= 10 ) { n = b ; while ( 2 <= n ) { if ( n <= ( n / 2 ) * 2 ) { n = n / 2 ; } else { n = 3 * n + 1 ; } x = x + 1 ; } b = b + 1 ; }
        </k>
        <mem>
          b |-> V12
          n |-> V13
          x |-> V14
        </mem>
      </imp> --> <imp>
        <k>
          while ( 2 <= n ) { if ( n <= ( n / 2 ) * 2 ) { n = n / 2 ; } else { n = 3 * n + 1 ; } x = x + 1 ; } ~> b = b + 1 ; ~> while ( b <= 10 ) { n = b ; while ( 2 <= n ) { if ( n <= ( n / 2 ) * 2 ) { n = n / 2 ; } else { n = 3 * n + 1 ; } x = x + 1 ; } b = b + 1 ; }
        </k>
        <mem>
          b |-> V12
          n |-> V13 /Int 2
          x |-> V14 +Int 1
        </mem>
      </imp> requires 2 <=Int V13 ==K true #And
      V13 <=Int V13 /Int 2 *Int 2 ==K true >
    </analysis>
    <states>
      .States
    </states>
  </kat>
  <harness>
    <imp>
      <k>
        while ( 2 <= n ) { if ( n <= ( n / 2 ) * 2 ) { n = n / 2 ; } else { n = 3 * n + 1 ; } x = x + 1 ; } ~> b = b + 1 ; ~> while ( b <= 10 ) { n = b ; while ( 2 <= n ) { if ( n <= ( n / 2 ) * 2 ) { n = n / 2 ; } else { n = 3 * n + 1 ; } x = x + 1 ; } b = b + 1 ; }
      </k>
      <mem>
        b |-> V15
        n |-> V16
        x |-> V17
      </mem>
    </imp>
  </harness>
</kat-imp>
