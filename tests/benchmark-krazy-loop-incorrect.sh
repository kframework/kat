# IMP-KAT Tests
# =============

# This is a simple testing harness driven by the `tangle` script. Call
# `./tangle test` in the root directory to run the test-set.

# SBC Benchmarking
# ----------------

# The above `compile` result for Collatz corresponds to the following K
# definition. We've replaced the `k` cells with constants, which can be done
# automatically using hashing but here is done manually.

# -   `INIT` corresponds to the entire program:
#     `int n , ( x , .Ids ) ; n = 782 ; x = 0 ; while ( 2 <= n ) { if ( n <= ( ( n / 2 ) * 2 ) ) { n = n / 2 ; } else { n = 3 * n + 1 ; } x = x + 1 ; }`
# -   `LOOP` corresponds to just the loop:
#     `while ( 2 <= n ) { if ( n <= ( ( n / 2 ) * 2 ) ) { n = n / 2 ; } else { n = 3 * n + 1 ; } x = x + 1 ; }`
# -   `FINISH` corresponds to the final state: `.`

# Here is the compiled version of Collatz all, which checks every Collatz number
# up to 10.

# -   `INIT` corresponds to the entire program.
# -   `OUTER` corresponds to the program starting at the outer `while` loop.
# -   `INNER` corresponds to the program starting at the inner `while` loop.
# -   `FINISHED` corresponds to the completed program.

# ### BIMC Execution Time

# In addition to concrete execution speedup, we get a speedup in the other
# analysis tools that can be run after SBC. Here we'll check the runtime of BIMC
# for the Collatz program, then compare to the time of BIMC of the system
# generated by SBC.

# To do this, we'll find the highest number that is reached on Collatz of 782 by
# incrementally increasing the maximum bound we check for as an invariant.

# The first number is the `bound` on how high we'll let Collatz go. The second
# number is the number of steps it took to get there. The third number is how long
# it took to run on my laptop on a Sunday.

#   bound   concrete (ms)   compiled (ms)   speedup
#   ------- --------------- --------------- ---------
#   1000    2154            596             3.61
#   1174    3378            818             4.13
#   1762    4497            966             4.66
#   2644    43825           4673            9.78
#   3238    45397           4521            10.04
#   4858    44939           4707            9.55
#   7288    53164           5209            10.21
#   9323    71187           6851            10.39
# 


echo
echo "Timing krazy-loop-incorrect ..."
echo "Using concrete execution ..."
krun --directory '../' -cSTRATEGY='bimc 5000 (not div-zero-error?)' krazy-loop-incorrect.imp
echo "Using compiled execution ..."
krun --directory 'krazy-loop-incorrect-compiled/' -cSTRATEGY='bimc 5000 (not div-zero-error?)' -cPGM='INIT'

