
Strategy: orig
================================================================================
<FUN>
  <k>
    closure ( f00 |-> closure ( .Map , x -> ( fun y -> x | .Cases ) | .Cases )
    f01 |-> closure ( f00 |-> closure ( .Map , x -> ( fun y -> x | .Cases ) | .Cases ) , x -> f00 ( f00 x ) | .Cases )
    f02 |-> closure ( f00 |-> closure ( .Map , x -> ( fun y -> x | .Cases ) | .Cases )
    f01 |-> closure ( f00 |-> closure ( .Map , x -> ( fun y -> x | .Cases ) | .Cases ) , x -> f00 ( f00 x ) | .Cases ) , x -> f01 ( f01 x ) | .Cases )
    f03 |-> closure ( f00 |-> closure ( .Map , x -> ( fun y -> x | .Cases ) | .Cases )
    f01 |-> closure ( f00 |-> closure ( .Map , x -> ( fun y -> x | .Cases ) | .Cases ) , x -> f00 ( f00 x ) | .Cases )
    f02 |-> closure ( f00 |-> closure ( .Map , x -> ( fun y -> x | .Cases ) | .Cases )
    f01 |-> closure ( f00 |-> closure ( .Map , x -> ( fun y -> x | .Cases ) | .Cases ) , x -> f00 ( f00 x ) | .Cases ) , x -> f01 ( f01 x ) | .Cases ) , x -> f02 ( f02 x ) | .Cases ) , x -> f03 ( f03 x ) | .Cases )
  </k>
  <env>
    .Map
  </env>
  <envs>
    .List
  </envs>
</FUN>

Strategy: exec
================================================================================
<kat-FUN>
  <s>
    #STUCK ( )
  </s>
  <kat>
    <analysis>
      .Analysis
    </analysis>
    <states>
      .States
    </states>
  </kat>
  <harness>
    <FUN>
      <k>
        closure ( f00 |-> closure ( .Map , x -> ( fun y -> x | .Cases ) | .Cases )
        f01 |-> closure ( f00 |-> closure ( .Map , x -> ( fun y -> x | .Cases ) | .Cases ) , x -> f00 ( f00 x ) | .Cases )
        f02 |-> closure ( f00 |-> closure ( .Map , x -> ( fun y -> x | .Cases ) | .Cases )
        f01 |-> closure ( f00 |-> closure ( .Map , x -> ( fun y -> x | .Cases ) | .Cases ) , x -> f00 ( f00 x ) | .Cases ) , x -> f01 ( f01 x ) | .Cases )
        f03 |-> closure ( f00 |-> closure ( .Map , x -> ( fun y -> x | .Cases ) | .Cases )
        f01 |-> closure ( f00 |-> closure ( .Map , x -> ( fun y -> x | .Cases ) | .Cases ) , x -> f00 ( f00 x ) | .Cases )
        f02 |-> closure ( f00 |-> closure ( .Map , x -> ( fun y -> x | .Cases ) | .Cases )
        f01 |-> closure ( f00 |-> closure ( .Map , x -> ( fun y -> x | .Cases ) | .Cases ) , x -> f00 ( f00 x ) | .Cases ) , x -> f01 ( f01 x ) | .Cases ) , x -> f02 ( f02 x ) | .Cases ) , x -> f03 ( f03 x ) | .Cases )
      </k>
      <env>
        .Map
      </env>
      <envs>
        .List
      </envs>
    </FUN>
  </harness>
</kat-FUN>

Strategy: compile
================================================================================
<kat-FUN>
  <s>
    #STUCK ( )
  </s>
  <kat>
    <analysis>
      .Rules , < <FUN>
        <k>
          let ( f00 = fun x -> ( fun y -> x | .Cases ) | .Cases ) and .Bindings in let ( f01 = fun x -> f00 f00 x | .Cases ) and .Bindings in let ( f02 = fun x -> f01 ( f01 x ) | .Cases ) and .Bindings in let ( f03 = fun x -> f02 f02 x | .Cases ) and .Bindings in let ( f04 = fun x -> f03 f03 x | .Cases ) and .Bindings in f04
        </k>
        <env>
          .Map
        </env>
        <envs>
          .List
        </envs>
      </FUN> --> <FUN>
        <k>
          closure ( f00 |-> closure ( .Map , x -> ( fun y -> x | .Cases ) | .Cases )
          f01 |-> closure ( f00 |-> closure ( .Map , x -> ( fun y -> x | .Cases ) | .Cases ) , x -> f00 f00 x | .Cases )
          f02 |-> closure ( f00 |-> closure ( .Map , x -> ( fun y -> x | .Cases ) | .Cases )
          f01 |-> closure ( f00 |-> closure ( .Map , x -> ( fun y -> x | .Cases ) | .Cases ) , x -> f00 f00 x | .Cases ) , x -> f01 ( f01 x ) | .Cases )
          f03 |-> closure ( f00 |-> closure ( .Map , x -> ( fun y -> x | .Cases ) | .Cases )
          f01 |-> closure ( f00 |-> closure ( .Map , x -> ( fun y -> x | .Cases ) | .Cases ) , x -> f00 f00 x | .Cases )
          f02 |-> closure ( f00 |-> closure ( .Map , x -> ( fun y -> x | .Cases ) | .Cases )
          f01 |-> closure ( f00 |-> closure ( .Map , x -> ( fun y -> x | .Cases ) | .Cases ) , x -> f00 f00 x | .Cases ) , x -> f01 ( f01 x ) | .Cases ) , x -> f02 f02 x | .Cases ) , x -> f03 f03 x | .Cases )
        </k>
        <env>
          .Map
        </env>
        <envs>
          .List
        </envs>
      </FUN> requires #True >
    </analysis>
    <states>
      .States
    </states>
  </kat>
  <harness>
    <FUN>
      <k>
        closure ( f00 |-> closure ( .Map , x -> ( fun y -> x | .Cases ) | .Cases )
        f01 |-> closure ( f00 |-> closure ( .Map , x -> ( fun y -> x | .Cases ) | .Cases ) , x -> f00 f00 x | .Cases )
        f02 |-> closure ( f00 |-> closure ( .Map , x -> ( fun y -> x | .Cases ) | .Cases )
        f01 |-> closure ( f00 |-> closure ( .Map , x -> ( fun y -> x | .Cases ) | .Cases ) , x -> f00 f00 x | .Cases ) , x -> f01 ( f01 x ) | .Cases )
        f03 |-> closure ( f00 |-> closure ( .Map , x -> ( fun y -> x | .Cases ) | .Cases )
        f01 |-> closure ( f00 |-> closure ( .Map , x -> ( fun y -> x | .Cases ) | .Cases ) , x -> f00 f00 x | .Cases )
        f02 |-> closure ( f00 |-> closure ( .Map , x -> ( fun y -> x | .Cases ) | .Cases )
        f01 |-> closure ( f00 |-> closure ( .Map , x -> ( fun y -> x | .Cases ) | .Cases ) , x -> f00 f00 x | .Cases ) , x -> f01 ( f01 x ) | .Cases ) , x -> f02 f02 x | .Cases ) , x -> f03 f03 x | .Cases )
      </k>
      <env>
        .Map
      </env>
      <envs>
        .List
      </envs>
    </FUN>
  </harness>
</kat-FUN>

Strategy: step
================================================================================
<kat-FUN>
  <s>
    #STUCK ( )
  </s>
  <kat>
    <analysis>
      .Analysis
    </analysis>
    <states>
      .States
    </states>
  </kat>
  <harness>
    <FUN>
      <k>
        closure ( .Map , x -> ( fun y -> x | .Cases ) | .Cases ) : .Vals ~> #assign ( f00 , .Names ) ~> let ( f01 = fun x -> f00 ( f00 x ) | .Cases ) and .Bindings in let ( f02 = fun x -> f01 ( f01 x ) | .Cases ) and .Bindings in let ( f03 = fun x -> f02 ( f02 x ) | .Cases ) and .Bindings in let ( f04 = fun x -> f03 ( f03 x ) | .Cases ) and .Bindings in f04 ~> popEnv
      </k>
      <env>
        .Map
      </env>
      <envs>
        ListItem ( .Map )
      </envs>
    </FUN>
  </harness>
</kat-FUN>

Strategy: step 6
================================================================================
<kat-FUN>
  <s>
    #STUCK ( )
  </s>
  <kat>
    <analysis>
      .Analysis
    </analysis>
    <states>
      .States
    </states>
  </kat>
  <harness>
    <FUN>
      <k>
        let ( f03 = fun x -> f02 ( f02 x ) | .Cases ) and .Bindings in let ( f04 = fun x -> f03 ( f03 x ) | .Cases ) and .Bindings in f04 ~> popEnv ~> popEnv ~> popEnv
      </k>
      <env>
        f00 |-> closure ( .Map , x -> ( fun y -> x | .Cases ) | .Cases )
        f01 |-> closure ( f00 |-> closure ( .Map , x -> ( fun y -> x | .Cases ) | .Cases ) , x -> f00 ( f00 x ) | .Cases )
        f02 |-> closure ( f00 |-> closure ( .Map , x -> ( fun y -> x | .Cases ) | .Cases )
        f01 |-> closure ( f00 |-> closure ( .Map , x -> ( fun y -> x | .Cases ) | .Cases ) , x -> f00 ( f00 x ) | .Cases ) , x -> f01 ( f01 x ) | .Cases )
      </env>
      <envs>
        ListItem ( f00 |-> closure ( .Map , x -> ( fun y -> x | .Cases ) | .Cases )
        f01 |-> closure ( f00 |-> closure ( .Map , x -> ( fun y -> x | .Cases ) | .Cases ) , x -> f00 ( f00 x ) | .Cases ) )
        ListItem ( f00 |-> closure ( .Map , x -> ( fun y -> x | .Cases ) | .Cases ) )
        ListItem ( .Map )
      </envs>
    </FUN>
  </harness>
</kat-FUN>
