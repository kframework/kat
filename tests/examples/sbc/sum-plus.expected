Result ==K <kat-imp>
  <s>
    #STUCK ( ) ~> #compile-result .Rules , < { int n , s , .Ids ; n = 10 ; while ( 0 <= n ) { n = n + -1 ; s = s + n ; } s = s + 300 ; | .Map } --> { if ( 0 <= n ) { { n = n + -1 ; s = s + n ; } while ( 0 <= n ) { n = n + -1 ; s = s + n ; } } else { } ~> s = s + 300 ; | n |-> 10
    s |-> V0 } > , < { false ~> if ( 0 <= n ) { { n = n + -1 ; s = s + n ; } while ( 0 <= n ) { n = n + -1 ; s = s + n ; } } else { } ~> s = s + 300 ; | n |-> V1
    s |-> V2 } --> { . | n |-> V1
    s |-> V2 +Int 300 } > , < { true ~> if ( 0 <= n ) { { n = n + -1 ; s = s + n ; } while ( 0 <= n ) { n = n + -1 ; s = s + n ; } } else { } ~> s = s + 300 ; | n |-> V1
    s |-> V2 } --> { if ( 0 <= n ) { { n = n + -1 ; s = s + n ; } while ( 0 <= n ) { n = n + -1 ; s = s + n ; } } else { } ~> s = s + 300 ; | n |-> V1 +Int -1
    s |-> V2 +Int ( V1 +Int -1 ) } >
  </s>
  <kat>
    <analysis>
      .Analysis
    </analysis>
    <states>
      .States
    </states>
  </kat>
  <imp>
    <k>
      if ( 0 <= n ) { { n = n + -1 ; s = s + n ; } while ( 0 <= n ) { n = n + -1 ; s = s + n ; } } else { } ~> s = s + 300 ;
    </k>
    <mem>
      n |-> V3
      s |-> V4
    </mem>
  </imp>
</kat-imp>
