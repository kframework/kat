BAD OUTPUT: Only generating one side of rule for if branch.
Result ==K <kat-imp>
  <s>
    #STUCK ( ) ~> #compile-result .Rules , < <imp>
      <k>
        int i , j , k , l , m , s , .Ids ; i = 11 ; j = 11 ; k = 0 ; l = 0 ; m = 0 ; s = 0 ; while ( 0 < i ) { k = 0 ; j = 11 ; while ( 0 <= j ) { l = 3 * j - ( j + i ) ; m = 5 * i + 1 ; if ( i <= ( i / 2 ) * 2 ) { k = k + l / i ; } else { k = k + j / m ; } j = j - 1 ; } s = s + ( i * k ) / 3 ; i = i - 1 ; }
      </k>
      <mem>
        .Map
      </mem>
    </imp> --> <imp>
      <k>
        if ( 0 < i ) { { k = 0 ; j = 11 ; while ( 0 <= j ) { l = 3 * j - ( j + i ) ; m = 5 * i + 1 ; if ( i <= ( i / 2 ) * 2 ) { k = k + l / i ; } else { k = k + j / m ; } j = j - 1 ; } s = s + ( i * k ) / 3 ; i = i - 1 ; } while ( 0 < i ) { k = 0 ; j = 11 ; while ( 0 <= j ) { l = 3 * j - ( j + i ) ; m = 5 * i + 1 ; if ( i <= ( i / 2 ) * 2 ) { k = k + l / i ; } else { k = k + j / m ; } j = j - 1 ; } s = s + ( i * k ) / 3 ; i = i - 1 ; } } else { }
      </k>
      <mem>
        i |-> 11
        j |-> 11
        k |-> 0
        l |-> 0
        m |-> 0
        s |-> 0
      </mem>
    </imp> > , < <imp>
      <k>
        false ~> if ( 0 < i ) { { k = 0 ; j = 11 ; while ( 0 <= j ) { l = 3 * j - ( j + i ) ; m = 5 * i + 1 ; if ( i <= ( i / 2 ) * 2 ) { k = k + l / i ; } else { k = k + j / m ; } j = j - 1 ; } s = s + ( i * k ) / 3 ; i = i - 1 ; } while ( 0 < i ) { k = 0 ; j = 11 ; while ( 0 <= j ) { l = 3 * j - ( j + i ) ; m = 5 * i + 1 ; if ( i <= ( i / 2 ) * 2 ) { k = k + l / i ; } else { k = k + j / m ; } j = j - 1 ; } s = s + ( i * k ) / 3 ; i = i - 1 ; } } else { }
      </k>
      <mem>
        i |-> V0
        j |-> V1
        k |-> V2
        l |-> V3
        m |-> V4
        s |-> V5
      </mem>
    </imp> --> <imp>
      <k>
        .
      </k>
      <mem>
        i |-> V0
        j |-> V1
        k |-> V2
        l |-> V3
        m |-> V4
        s |-> V5
      </mem>
    </imp> > , < <imp>
      <k>
        true ~> if ( 0 < i ) { { k = 0 ; j = 11 ; while ( 0 <= j ) { l = 3 * j - ( j + i ) ; m = 5 * i + 1 ; if ( i <= ( i / 2 ) * 2 ) { k = k + l / i ; } else { k = k + j / m ; } j = j - 1 ; } s = s + ( i * k ) / 3 ; i = i - 1 ; } while ( 0 < i ) { k = 0 ; j = 11 ; while ( 0 <= j ) { l = 3 * j - ( j + i ) ; m = 5 * i + 1 ; if ( i <= ( i / 2 ) * 2 ) { k = k + l / i ; } else { k = k + j / m ; } j = j - 1 ; } s = s + ( i * k ) / 3 ; i = i - 1 ; } } else { }
      </k>
      <mem>
        i |-> V0
        j |-> V1
        k |-> V2
        l |-> V3
        m |-> V4
        s |-> V5
      </mem>
    </imp> --> <imp>
      <k>
        if ( 0 <= j ) { { l = 3 * j - ( j + i ) ; m = 5 * i + 1 ; if ( i <= ( i / 2 ) * 2 ) { k = k + l / i ; } else { k = k + j / m ; } j = j - 1 ; } while ( 0 <= j ) { l = 3 * j - ( j + i ) ; m = 5 * i + 1 ; if ( i <= ( i / 2 ) * 2 ) { k = k + l / i ; } else { k = k + j / m ; } j = j - 1 ; } } else { } ~> s = s + ( i * k ) / 3 ; ~> i = i - 1 ; ~> while ( 0 < i ) { k = 0 ; j = 11 ; while ( 0 <= j ) { l = 3 * j - ( j + i ) ; m = 5 * i + 1 ; if ( i <= ( i / 2 ) * 2 ) { k = k + l / i ; } else { k = k + j / m ; } j = j - 1 ; } s = s + ( i * k ) / 3 ; i = i - 1 ; }
      </k>
      <mem>
        i |-> V0
        j |-> 11
        k |-> 0
        l |-> V3
        m |-> V4
        s |-> V5
      </mem>
    </imp> > , < <imp>
      <k>
        false ~> if ( 0 <= j ) { { l = 3 * j - ( j + i ) ; m = 5 * i + 1 ; if ( i <= ( i / 2 ) * 2 ) { k = k + l / i ; } else { k = k + j / m ; } j = j - 1 ; } while ( 0 <= j ) { l = 3 * j - ( j + i ) ; m = 5 * i + 1 ; if ( i <= ( i / 2 ) * 2 ) { k = k + l / i ; } else { k = k + j / m ; } j = j - 1 ; } } else { } ~> s = s + ( i * k ) / 3 ; ~> i = i - 1 ; ~> while ( 0 < i ) { k = 0 ; j = 11 ; while ( 0 <= j ) { l = 3 * j - ( j + i ) ; m = 5 * i + 1 ; if ( i <= ( i / 2 ) * 2 ) { k = k + l / i ; } else { k = k + j / m ; } j = j - 1 ; } s = s + ( i * k ) / 3 ; i = i - 1 ; }
      </k>
      <mem>
        i |-> V6
        j |-> V7
        k |-> V8
        l |-> V9
        m |-> V10
        s |-> V11
      </mem>
    </imp> --> <imp>
      <k>
        if ( 0 < i ) { { k = 0 ; j = 11 ; while ( 0 <= j ) { l = 3 * j - ( j + i ) ; m = 5 * i + 1 ; if ( i <= ( i / 2 ) * 2 ) { k = k + l / i ; } else { k = k + j / m ; } j = j - 1 ; } s = s + ( i * k ) / 3 ; i = i - 1 ; } while ( 0 < i ) { k = 0 ; j = 11 ; while ( 0 <= j ) { l = 3 * j - ( j + i ) ; m = 5 * i + 1 ; if ( i <= ( i / 2 ) * 2 ) { k = k + l / i ; } else { k = k + j / m ; } j = j - 1 ; } s = s + ( i * k ) / 3 ; i = i - 1 ; } } else { }
      </k>
      <mem>
        i |-> V6 -Int 1
        j |-> V7
        k |-> V8
        l |-> V9
        m |-> V10
        s |-> V11 +Int V6 *Int V8 /Int 3
      </mem>
    </imp> >
  </s>
  <kat>
    <analysis>
      .Analysis
    </analysis>
    <states>
      .States
    </states>
  </kat>
  <harness>
    <imp>
      <k>
        if ( 0 < i ) { { k = 0 ; j = 11 ; while ( 0 <= j ) { l = 3 * j - ( j + i ) ; m = 5 * i + 1 ; if ( i <= ( i / 2 ) * 2 ) { k = k + l / i ; } else { k = k + j / m ; } j = j - 1 ; } s = s + ( i * k ) / 3 ; i = i - 1 ; } while ( 0 < i ) { k = 0 ; j = 11 ; while ( 0 <= j ) { l = 3 * j - ( j + i ) ; m = 5 * i + 1 ; if ( i <= ( i / 2 ) * 2 ) { k = k + l / i ; } else { k = k + j / m ; } j = j - 1 ; } s = s + ( i * k ) / 3 ; i = i - 1 ; } } else { }
      </k>
      <mem>
        i |-> V12
        j |-> V13
        k |-> V14
        l |-> V15
        m |-> V16
        s |-> V17
      </mem>
    </imp>
  </harness>
</kat-imp>
