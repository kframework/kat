BAD OUTPUT: Only generating one side of rule for if branch.
Result ==K <kat-imp>
  <s>
    #STUCK ( ) ~> #compile-result .Rules , < <imp>
      <k>
        int n , x , .Ids ; n = 782 ; x = 0 ; while ( 2 <= n ) { if ( n <= ( n / 2 ) * 2 ) { n = n / 2 ; } else { n = 3 * n + 1 ; } x = x + 1 ; }
      </k>
      <mem>
        .Map
      </mem>
    </imp> --> <imp>
      <k>
        if ( 2 <= n ) { { if ( n <= ( n / 2 ) * 2 ) { n = n / 2 ; } else { n = 3 * n + 1 ; } x = x + 1 ; } while ( 2 <= n ) { if ( n <= ( n / 2 ) * 2 ) { n = n / 2 ; } else { n = 3 * n + 1 ; } x = x + 1 ; } } else { }
      </k>
      <mem>
        n |-> 782
        x |-> 0
      </mem>
    </imp> > , < <imp>
      <k>
        false ~> if ( 2 <= n ) { { if ( n <= ( n / 2 ) * 2 ) { n = n / 2 ; } else { n = 3 * n + 1 ; } x = x + 1 ; } while ( 2 <= n ) { if ( n <= ( n / 2 ) * 2 ) { n = n / 2 ; } else { n = 3 * n + 1 ; } x = x + 1 ; } } else { }
      </k>
      <mem>
        n |-> V0
        x |-> V1
      </mem>
    </imp> --> <imp>
      <k>
        .
      </k>
      <mem>
        n |-> V0
        x |-> V1
      </mem>
    </imp> > , < <imp>
      <k>
        true ~> if ( 2 <= n ) { { if ( n <= ( n / 2 ) * 2 ) { n = n / 2 ; } else { n = 3 * n + 1 ; } x = x + 1 ; } while ( 2 <= n ) { if ( n <= ( n / 2 ) * 2 ) { n = n / 2 ; } else { n = 3 * n + 1 ; } x = x + 1 ; } } else { }
      </k>
      <mem>
        n |-> V0
        x |-> V1
      </mem>
    </imp> --> <imp>
      <k>
        if ( n <= ( n / 2 ) * 2 ) { n = n / 2 ; } else { n = 3 * n + 1 ; } ~> x = x + 1 ; ~> while ( 2 <= n ) { if ( n <= ( n / 2 ) * 2 ) { n = n / 2 ; } else { n = 3 * n + 1 ; } x = x + 1 ; }
      </k>
      <mem>
        n |-> V0
        x |-> V1
      </mem>
    </imp> > , < <imp>
      <k>
        false ~> if ( n <= ( n / 2 ) * 2 ) { n = n / 2 ; } else { n = 3 * n + 1 ; } ~> x = x + 1 ; ~> while ( 2 <= n ) { if ( n <= ( n / 2 ) * 2 ) { n = n / 2 ; } else { n = 3 * n + 1 ; } x = x + 1 ; }
      </k>
      <mem>
        n |-> V2
        x |-> V3
      </mem>
    </imp> --> <imp>
      <k>
        if ( 2 <= n ) { { if ( n <= ( n / 2 ) * 2 ) { n = n / 2 ; } else { n = 3 * n + 1 ; } x = x + 1 ; } while ( 2 <= n ) { if ( n <= ( n / 2 ) * 2 ) { n = n / 2 ; } else { n = 3 * n + 1 ; } x = x + 1 ; } } else { }
      </k>
      <mem>
        n |-> 3 *Int V2 +Int 1
        x |-> V3 +Int 1
      </mem>
    </imp> >
  </s>
  <kat>
    <analysis>
      .Analysis
    </analysis>
    <states>
      .States
    </states>
  </kat>
  <harness>
    <imp>
      <k>
        if ( 2 <= n ) { { if ( n <= ( n / 2 ) * 2 ) { n = n / 2 ; } else { n = 3 * n + 1 ; } x = x + 1 ; } while ( 2 <= n ) { if ( n <= ( n / 2 ) * 2 ) { n = n / 2 ; } else { n = 3 * n + 1 ; } x = x + 1 ; } } else { }
      </k>
      <mem>
        n |-> V4
        x |-> V5
      </mem>
    </imp>
  </harness>
</kat-imp>
