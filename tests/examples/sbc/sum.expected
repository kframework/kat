Result ==K <kat-imp>
  <s>
    #STUCK ( ) ~> #compile-result .Rules , < <imp>
      <k>
        int n , s , .Ids ; n = 10 ; s = 0 ; while ( 0 <= n ) { n = n + -1 ; s = s + n ; }
      </k>
      <mem>
        .Map
      </mem>
    </imp> --> <imp>
      <k>
        if ( 0 <= n ) { { n = n + -1 ; s = s + n ; } while ( 0 <= n ) { n = n + -1 ; s = s + n ; } } else { }
      </k>
      <mem>
        n |-> 10
        s |-> 0
      </mem>
    </imp> > , < <imp>
      <k>
        false ~> if ( 0 <= n ) { { n = n + -1 ; s = s + n ; } while ( 0 <= n ) { n = n + -1 ; s = s + n ; } } else { }
      </k>
      <mem>
        n |-> V0
        s |-> V1
      </mem>
    </imp> --> <imp>
      <k>
        .
      </k>
      <mem>
        n |-> V0
        s |-> V1
      </mem>
    </imp> > , < <imp>
      <k>
        true ~> if ( 0 <= n ) { { n = n + -1 ; s = s + n ; } while ( 0 <= n ) { n = n + -1 ; s = s + n ; } } else { }
      </k>
      <mem>
        n |-> V0
        s |-> V1
      </mem>
    </imp> --> <imp>
      <k>
        if ( 0 <= n ) { { n = n + -1 ; s = s + n ; } while ( 0 <= n ) { n = n + -1 ; s = s + n ; } } else { }
      </k>
      <mem>
        n |-> V0 +Int -1
        s |-> V1 +Int ( V0 +Int -1 )
      </mem>
    </imp> >
  </s>
  <kat>
    <analysis>
      .Analysis
    </analysis>
    <states>
      .States
    </states>
  </kat>
  <harness>
    <imp>
      <k>
        if ( 0 <= n ) { { n = n + -1 ; s = s + n ; } while ( 0 <= n ) { n = n + -1 ; s = s + n ; } } else { }
      </k>
      <mem>
        n |-> V2
        s |-> V3
      </mem>
    </imp>
  </harness>
</kat-imp>
