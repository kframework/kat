Result ==K <kat-imp>
  <s>
    #STUCK ( ) ~> #bimc-result #false in 25 steps
  </s>
  <kat>
    <analysis>
      .Trace ; <imp>
        <k>
          while ( 2 <= n ) { if ( n <= ( n / 2 ) * 2 ) { n = n / 2 ; } else { n = 3 * n + 1 ; } x = x + 1 ; }
        </k>
        <mem>
          n |-> 782
          x |-> 0
        </mem>
      </imp> ; <imp>
        <k>
          if ( 2 <= n ) { { if ( n <= ( n / 2 ) * 2 ) { n = n / 2 ; } else { n = 3 * n + 1 ; } x = x + 1 ; } while ( 2 <= n ) { if ( n <= ( n / 2 ) * 2 ) { n = n / 2 ; } else { n = 3 * n + 1 ; } x = x + 1 ; } } else { }
        </k>
        <mem>
          n |-> 782
          x |-> 0
        </mem>
      </imp> ; <imp>
        <k>
          n ~> #freezer_<=__IMP0_ ( 2 ) ~> if ( 2 <= n ) { { if ( n <= ( n / 2 ) * 2 ) { n = n / 2 ; } else { n = 3 * n + 1 ; } x = x + 1 ; } while ( 2 <= n ) { if ( n <= ( n / 2 ) * 2 ) { n = n / 2 ; } else { n = 3 * n + 1 ; } x = x + 1 ; } } else { }
        </k>
        <mem>
          n |-> 782
          x |-> 0
        </mem>
      </imp> ; <imp>
        <k>
          true ~> if ( 2 <= n ) { { if ( n <= ( n / 2 ) * 2 ) { n = n / 2 ; } else { n = 3 * n + 1 ; } x = x + 1 ; } while ( 2 <= n ) { if ( n <= ( n / 2 ) * 2 ) { n = n / 2 ; } else { n = 3 * n + 1 ; } x = x + 1 ; } } else { }
        </k>
        <mem>
          n |-> 782
          x |-> 0
        </mem>
      </imp> ; <imp>
        <k>
          if ( n <= ( n / 2 ) * 2 ) { n = n / 2 ; } else { n = 3 * n + 1 ; } ~> x = x + 1 ; ~> while ( 2 <= n ) { if ( n <= ( n / 2 ) * 2 ) { n = n / 2 ; } else { n = 3 * n + 1 ; } x = x + 1 ; }
        </k>
        <mem>
          n |-> 782
          x |-> 0
        </mem>
      </imp> ; <imp>
        <k>
          n ~> #freezer_<=__IMP1_ ( ( n / 2 ) * 2 ) ~> if ( n <= ( n / 2 ) * 2 ) { n = n / 2 ; } else { n = 3 * n + 1 ; } ~> x = x + 1 ; ~> while ( 2 <= n ) { if ( n <= ( n / 2 ) * 2 ) { n = n / 2 ; } else { n = 3 * n + 1 ; } x = x + 1 ; }
        </k>
        <mem>
          n |-> 782
          x |-> 0
        </mem>
      </imp> ; <imp>
        <k>
          n ~> #freezer_/__IMP1_ ( 2 ) ~> #freezer_*__IMP1_ ( 2 ) ~> #freezer_<=__IMP0_ ( 782 ) ~> if ( n <= ( n / 2 ) * 2 ) { n = n / 2 ; } else { n = 3 * n + 1 ; } ~> x = x + 1 ; ~> while ( 2 <= n ) { if ( n <= ( n / 2 ) * 2 ) { n = n / 2 ; } else { n = 3 * n + 1 ; } x = x + 1 ; }
        </k>
        <mem>
          n |-> 782
          x |-> 0
        </mem>
      </imp> ; <imp>
        <k>
          782 / 2 ~> #freezer_*__IMP1_ ( 2 ) ~> #freezer_<=__IMP0_ ( 782 ) ~> if ( n <= ( n / 2 ) * 2 ) { n = n / 2 ; } else { n = 3 * n + 1 ; } ~> x = x + 1 ; ~> while ( 2 <= n ) { if ( n <= ( n / 2 ) * 2 ) { n = n / 2 ; } else { n = 3 * n + 1 ; } x = x + 1 ; }
        </k>
        <mem>
          n |-> 782
          x |-> 0
        </mem>
      </imp> ; <imp>
        <k>
          true ~> if ( n <= ( n / 2 ) * 2 ) { n = n / 2 ; } else { n = 3 * n + 1 ; } ~> x = x + 1 ; ~> while ( 2 <= n ) { if ( n <= ( n / 2 ) * 2 ) { n = n / 2 ; } else { n = 3 * n + 1 ; } x = x + 1 ; }
        </k>
        <mem>
          n |-> 782
          x |-> 0
        </mem>
      </imp> ; <imp>
        <k>
          n ~> #freezer_/__IMP1_ ( 2 ) ~> #freezer_=_;_IMP0_ ( n ) ~> x = x + 1 ; ~> while ( 2 <= n ) { if ( n <= ( n / 2 ) * 2 ) { n = n / 2 ; } else { n = 3 * n + 1 ; } x = x + 1 ; }
        </k>
        <mem>
          n |-> 782
          x |-> 0
        </mem>
      </imp> ; <imp>
        <k>
          782 / 2 ~> #freezer_=_;_IMP0_ ( n ) ~> x = x + 1 ; ~> while ( 2 <= n ) { if ( n <= ( n / 2 ) * 2 ) { n = n / 2 ; } else { n = 3 * n + 1 ; } x = x + 1 ; }
        </k>
        <mem>
          n |-> 782
          x |-> 0
        </mem>
      </imp> ; <imp>
        <k>
          n = 391 ; ~> x = x + 1 ; ~> while ( 2 <= n ) { if ( n <= ( n / 2 ) * 2 ) { n = n / 2 ; } else { n = 3 * n + 1 ; } x = x + 1 ; }
        </k>
        <mem>
          n |-> 782
          x |-> 0
        </mem>
      </imp> ; <imp>
        <k>
          x ~> #freezer_+__IMP1_ ( 1 ) ~> #freezer_=_;_IMP0_ ( x ) ~> while ( 2 <= n ) { if ( n <= ( n / 2 ) * 2 ) { n = n / 2 ; } else { n = 3 * n + 1 ; } x = x + 1 ; }
        </k>
        <mem>
          n |-> 391
          x |-> 0
        </mem>
      </imp> ; <imp>
        <k>
          x = 1 ; ~> while ( 2 <= n ) { if ( n <= ( n / 2 ) * 2 ) { n = n / 2 ; } else { n = 3 * n + 1 ; } x = x + 1 ; }
        </k>
        <mem>
          n |-> 391
          x |-> 0
        </mem>
      </imp> ; <imp>
        <k>
          while ( 2 <= n ) { if ( n <= ( n / 2 ) * 2 ) { n = n / 2 ; } else { n = 3 * n + 1 ; } x = x + 1 ; }
        </k>
        <mem>
          n |-> 391
          x |-> 1
        </mem>
      </imp> ; <imp>
        <k>
          if ( 2 <= n ) { { if ( n <= ( n / 2 ) * 2 ) { n = n / 2 ; } else { n = 3 * n + 1 ; } x = x + 1 ; } while ( 2 <= n ) { if ( n <= ( n / 2 ) * 2 ) { n = n / 2 ; } else { n = 3 * n + 1 ; } x = x + 1 ; } } else { }
        </k>
        <mem>
          n |-> 391
          x |-> 1
        </mem>
      </imp> ; <imp>
        <k>
          n ~> #freezer_<=__IMP0_ ( 2 ) ~> if ( 2 <= n ) { { if ( n <= ( n / 2 ) * 2 ) { n = n / 2 ; } else { n = 3 * n + 1 ; } x = x + 1 ; } while ( 2 <= n ) { if ( n <= ( n / 2 ) * 2 ) { n = n / 2 ; } else { n = 3 * n + 1 ; } x = x + 1 ; } } else { }
        </k>
        <mem>
          n |-> 391
          x |-> 1
        </mem>
      </imp> ; <imp>
        <k>
          true ~> if ( 2 <= n ) { { if ( n <= ( n / 2 ) * 2 ) { n = n / 2 ; } else { n = 3 * n + 1 ; } x = x + 1 ; } while ( 2 <= n ) { if ( n <= ( n / 2 ) * 2 ) { n = n / 2 ; } else { n = 3 * n + 1 ; } x = x + 1 ; } } else { }
        </k>
        <mem>
          n |-> 391
          x |-> 1
        </mem>
      </imp> ; <imp>
        <k>
          if ( n <= ( n / 2 ) * 2 ) { n = n / 2 ; } else { n = 3 * n + 1 ; } ~> x = x + 1 ; ~> while ( 2 <= n ) { if ( n <= ( n / 2 ) * 2 ) { n = n / 2 ; } else { n = 3 * n + 1 ; } x = x + 1 ; }
        </k>
        <mem>
          n |-> 391
          x |-> 1
        </mem>
      </imp> ; <imp>
        <k>
          n ~> #freezer_<=__IMP1_ ( ( n / 2 ) * 2 ) ~> if ( n <= ( n / 2 ) * 2 ) { n = n / 2 ; } else { n = 3 * n + 1 ; } ~> x = x + 1 ; ~> while ( 2 <= n ) { if ( n <= ( n / 2 ) * 2 ) { n = n / 2 ; } else { n = 3 * n + 1 ; } x = x + 1 ; }
        </k>
        <mem>
          n |-> 391
          x |-> 1
        </mem>
      </imp> ; <imp>
        <k>
          n ~> #freezer_/__IMP1_ ( 2 ) ~> #freezer_*__IMP1_ ( 2 ) ~> #freezer_<=__IMP0_ ( 391 ) ~> if ( n <= ( n / 2 ) * 2 ) { n = n / 2 ; } else { n = 3 * n + 1 ; } ~> x = x + 1 ; ~> while ( 2 <= n ) { if ( n <= ( n / 2 ) * 2 ) { n = n / 2 ; } else { n = 3 * n + 1 ; } x = x + 1 ; }
        </k>
        <mem>
          n |-> 391
          x |-> 1
        </mem>
      </imp> ; <imp>
        <k>
          391 / 2 ~> #freezer_*__IMP1_ ( 2 ) ~> #freezer_<=__IMP0_ ( 391 ) ~> if ( n <= ( n / 2 ) * 2 ) { n = n / 2 ; } else { n = 3 * n + 1 ; } ~> x = x + 1 ; ~> while ( 2 <= n ) { if ( n <= ( n / 2 ) * 2 ) { n = n / 2 ; } else { n = 3 * n + 1 ; } x = x + 1 ; }
        </k>
        <mem>
          n |-> 391
          x |-> 1
        </mem>
      </imp> ; <imp>
        <k>
          false ~> if ( n <= ( n / 2 ) * 2 ) { n = n / 2 ; } else { n = 3 * n + 1 ; } ~> x = x + 1 ; ~> while ( 2 <= n ) { if ( n <= ( n / 2 ) * 2 ) { n = n / 2 ; } else { n = 3 * n + 1 ; } x = x + 1 ; }
        </k>
        <mem>
          n |-> 391
          x |-> 1
        </mem>
      </imp> ; <imp>
        <k>
          n ~> #freezer_*__IMP0_ ( 3 ) ~> #freezer_+__IMP1_ ( 1 ) ~> #freezer_=_;_IMP0_ ( n ) ~> x = x + 1 ; ~> while ( 2 <= n ) { if ( n <= ( n / 2 ) * 2 ) { n = n / 2 ; } else { n = 3 * n + 1 ; } x = x + 1 ; }
        </k>
        <mem>
          n |-> 391
          x |-> 1
        </mem>
      </imp> ; <imp>
        <k>
          n = 1174 ; ~> x = x + 1 ; ~> while ( 2 <= n ) { if ( n <= ( n / 2 ) * 2 ) { n = n / 2 ; } else { n = 3 * n + 1 ; } x = x + 1 ; }
        </k>
        <mem>
          n |-> 391
          x |-> 1
        </mem>
      </imp>
    </analysis>
    <states>
      .States
    </states>
  </kat>
  <harness>
    <imp>
      <k>
        x ~> #freezer_+__IMP1_ ( 1 ) ~> #freezer_=_;_IMP0_ ( x ) ~> while ( 2 <= n ) { if ( n <= ( n / 2 ) * 2 ) { n = n / 2 ; } else { n = 3 * n + 1 ; } x = x + 1 ; }
      </k>
      <mem>
        n |-> 1174
        x |-> 1
      </mem>
    </imp>
  </harness>
</kat-imp>
