#!/usr/bin/env zsh

tangle_defn() {
    echo "generating 'kat.k', 'imp-kat.k', 'imp.k' ..."
    echo "============================================"

    pandoc-tangle --from markdown --to code-k --code kat KAT.md > kat.k
    pandoc-tangle --from markdown --to code-k --code imp-kat  KAT-IMP.md > imp-kat.k
    pandoc-tangle --from markdown --to code-k --code imp-lang KAT-IMP.md > imp.k

    echo "running 'kompile' ..."
    echo "====================="

    kompile --debug --main-module IMP-ANALYSIS --syntax-module IMP-ANALYSIS imp-kat.k || exit 1
}

tangle_examples() {
    echo "generating examples ..."
    echo "======================="

    [[ ! -d tests ]] && mkdir tests

    examples=(straight-line-1 straight-line-2 dead-if sum sum-plus collatz)

    for example in $examples; do
        pandoc-tangle --from markdown --to code-k --code "$example" KAT-IMP-examples.md > "tests/$example.imp"
    done
}

tangle_tests() {
    echo "generating tests ..."
    echo "===================="

    [[ ! -d tests/output ]] && mkdir -p tests/output

    pandoc-tangle --from markdown --to code-sh --code test KAT-IMP-examples.md > tests/test.sh
    chmod u+x tests/test.sh

    tests=( straight-line-1-bimc1 straight-line-1-bimc2
            straight-line-2-bimc1 straight-line-2-bimc2 straight-line-2-bimc3
            sum-bimc1 sum-bimc2 sum-bimc3 collatz-bimc
            straight-line-1-sbc straight-line-2-sbc
            dead-if-sbc sum-sbc sum-plus-sbc
            collatz-sbc
          )

    for test in $tests; do
        pandoc-tangle --from markdown --to code-k --code "$test" KAT-IMP-examples.md > tests/output/$test.out
    done

    echo "running tests ..."
    echo "================="

    pushd tests
    bash test.sh || exit 1
    popd
}

tangle_benchmarks() {
    echo "generating collatz-compiled ..."
    echo "==============================="
    [[ ! -d tests/collatz-compiled ]] && mkdir -p tests/collatz-compiled
    pandoc-tangle --from markdown --to code-k --code collatz-compiled KAT-IMP-examples.md > tests/collatz-compiled/collatz.k

    echo "kompiling collatz-compiled ..."
    echo "=============================="
    pushd tests/collatz-compiled
    kompile --debug --main-module COLLATZ-COMPILED --syntax-module COLLATZ-COMPILED collatz.k || exit 1
    popd

    echo "generating benchmarks ..."
    echo "========================="
    pandoc-tangle --from markdown --to code-sh --code benchmark-collatz KAT-IMP-examples.md > tests/benchmark-collatz.sh

    echo "running benchmarks ..."
    echo "======================"
    pushd tests
    bash benchmark-collatz.sh
    popd
}

[[ "$#" == '0' ]] && set all

while [[ "$#" -gt '0' ]]; do
    tangle_command="$1" && shift
    case "$tangle_command" in
        all)      set defn examples test bench ;;
        defn)     tangle_defn ;;
        examples) tangle_examples ;;
        test)     tangle_tests ;;
        bench)    tangle_benchmarks ;;
        *)        echo "Unrecognized option: '$tangle_command' ..." ;;
    esac
done
